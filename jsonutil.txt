public class JsonUtils {

	private static ObjectMapper MAPPER = new ObjectMapper();

	static {
		MAPPER.getSerializerProvider().setNullValueSerializer(new JsonSerializer<Object>() {
			@Override
			public void serialize(Object paramT, JsonGenerator paramJsonGenerator, SerializerProvider paramSerializerProvider)
					throws IOException, JsonProcessingException {
				paramJsonGenerator.writeString("");
			}
		});
		MAPPER.registerModule(new JavaTimeModule());
		MAPPER.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
	}

	public static <T> T toBean(String content, Class<T> clazz) throws IOException {
		Objects.requireNonNull(content, "The parameter content is required.");
		Objects.requireNonNull(clazz, "The parameter clzss is required.");
		return MAPPER.readValue(content, clazz);
	}

	public static <T> T toBean(String content, TypeReference<T> typeReference) throws IOException {
		Objects.requireNonNull(content, "The parameter content is required.");
		Objects.requireNonNull(typeReference, "The parameter typeReference is required.");
		return MAPPER.readValue(content, typeReference);
	}

	public static String toJson(Object obj) throws JsonProcessingException {
		Objects.requireNonNull(obj, "The parameter obj is required.");
		return MAPPER.writeValueAsString(obj);
	}

	public static String toJson(String key, List<? extends Object> list) throws JsonProcessingException {
		Map<String, List<?>> data = new HashMap<String, List<?>>();
		data.put(key, list);
		return JsonUtils.toJson(data);
	}

	public static String serialize(Object obj) {
		Objects.requireNonNull(obj, "The parameter obj is required.");
		try {
			return MAPPER.writeValueAsString(obj);
		} catch (JsonProcessingException e) {
			e.printStackTrace();
			return null;
		}
	}
	
	public static <T> T convertToBean(Object o, Class<T> clazz) {
		return MAPPER.convertValue(o, clazz);
	}
}
