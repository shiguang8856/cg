----strat of file D:\projects\cg\runappinswing\src\FileEncrptUtil.java---
package util;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.net.URLEncoder;
import java.security.Key;
import java.security.MessageDigest;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;
public class FileEncrptUtil {
  private static String ALGORITHM = "AES";
  public FileEncrptUtil() {}
  public static void encrypt(String key, File inputFile, File outputFile) throws Exception {
    doCrypto(Cipher.ENCRYPT_MODE, key, inputFile, outputFile);
  }
  public static void decrypt(String key, File inputFile, File outputFile) throws Exception {
    doCrypto(Cipher.DECRYPT_MODE, key, inputFile, outputFile);
  }
  public static byte[] decryptReturn(String key, File inputFile) throws Exception {
    return doCrypto(Cipher.DECRYPT_MODE, key, inputFile, null);
  }
  public static byte[] doCrypto(int cipherMode, String key, File inputFile, File outputFile)
      throws Exception {
    byte outputBytes[] = null;
    Key secretKeySpec = new SecretKeySpec(key.getBytes(), ALGORITHM);
    Cipher cipher = Cipher.getInstance(ALGORITHM);
    cipher.init(cipherMode, secretKeySpec);
    FileInputStream fileInputStream = new FileInputStream(inputFile);
    byte[] inputBytes = new byte[(int) inputFile.length()];
    for (int i = 0; i < inputBytes.length; i++) {
      inputBytes[i] = (byte) ~inputBytes[i];
    }
    int length = fileInputStream.read(inputBytes);
    outputBytes = cipher.doFinal(inputBytes);
    if (outputFile != null) {
      FileOutputStream fileOutputStream = new FileOutputStream(outputFile);
      fileOutputStream.write(outputBytes);
      fileOutputStream.close();
    }
    fileInputStream.close();
    return outputBytes;
  }
  public static byte[] createChecksum(File file) throws Exception {
    InputStream fis = new FileInputStream(file);
    byte[] buffer = new byte[1024];
    MessageDigest complete = MessageDigest.getInstance("MD5");
    int numRead;
    do {
      numRead = fis.read(buffer);
      if (numRead > 0) {
        complete.update(buffer, 0, numRead);
      }
    } while (numRead != -1);
    fis.close();
    return complete.digest();
  }
  public static String getMD5Checksum(File file) throws Exception {
    byte[] b = createChecksum(file);
    String result = "";
    for (int i = 0; i < b.length; i++) {
      result += Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1);
    }
    return result;
  }
  public static void main(String[] args) {
    String fileName = args.length>0 ? args[0] : "ui-1.0-jar-with-dependencies.jar";
    String s = args.length>1 ? args[1] : "aaa";
    String outputFilename = "eeeeeessssss";
    File infile = new File( fileName);
    File outputfile =
        new File("D:\\apache-tomcat-8.0.52-windows-x64\\apache-tomcat-8.0.52\\webapps\\enc_lib\\"
            + outputFilename); 
    try {
      FileEncrptUtil.encrypt(s, infile, outputfile);
      System.out.print("encrpt done, target file under " + outputFilename);
      FileEncrptUtil.decryptReturn(s, outputfile);
      FileEncrptUtil.encrypt(s, new File(
          "D:\\project\\codegen\\production\\springbootsimpletemplate\\target\\springbootsimpletemplate-1.0-jar-with-dependencies.jar"),
          new File(
              "D:\\apache-tomcat-8.0.52-windows-x64\\apache-tomcat-8.0.52\\webapps\\enc_lib\\springbootsimpletemplate"));
      FileEncrptUtil.encrypt(s, new File(
              "D:\\project\\codegen\\production\\springbootjpatemplate\\target\\springbootjpatemplate-1.0-jar-with-dependencies.jar"),
              new File(
                  "D:\\apache-tomcat-8.0.52-windows-x64\\apache-tomcat-8.0.52\\webapps\\enc_lib\\springbootjpatemplate"));
    } catch (Exception e) {
      e.printStackTrace();
    }
    System.setProperty("javax.net.ssl.trustStore",
        "D:\\apache-tomcat-8.0.52-windows-x64\\apache-tomcat-8.0.52\\conf\\tomcat_old.jks");
    System.setProperty("javax.net.ssl.trustStorePassword", "aaa");
    try {
      String key = URLEncoder.encode("Server&client111", "UTF-8");
      String path = URLEncoder
          .encode("D:\\apache-tomcat-8.0.52-windows-x64\\apache-tomcat-8.0.52\\webapps\\enc_lib\\"
              + fileName, "UTF-8");
      URL urlForApp =
          new URL(String.format("%s?key=%s&path=%s", "https://localhost/runapp/jar/1", key, path));
      URL urls[] = new URL[] {urlForApp};
      URLClassLoader ucl = new URLClassLoader(urls);
      Class c = ucl.loadClass("app.Main");
      System.out.print("class name is " + c.getName());
    } catch (UnsupportedEncodingException e) {
      e.printStackTrace();
    } catch (MalformedURLException e) {
      e.printStackTrace();
    } catch (ClassNotFoundException e) {
      e.printStackTrace();
    }
  }
}
----strat of file D:\projects\cg\runappinswing\src\JarServlet.java---
package servlet.deployment;
import java.io.File;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import util.FileEncrptUtil;
@WebServlet(value = "/jar/*")
public class JarServlet extends HttpServlet {
  @Override
  protected void doGet(HttpServletRequest httpServletRequest, HttpServletResponse resp)
      throws ServletException, IOException {
    String key = httpServletRequest.getParameter("key");
    String path = httpServletRequest.getParameter("path");
    resp.setContentType("application/jar");
    File file = new File(path);
    byte bArray[] = null;
    try {
      bArray = FileEncrptUtil.decryptReturn(key, file);
      System.out.println("done!!");
    } catch (Exception e) {
      e.printStackTrace();
    }
    ServletOutputStream servletOutputStream = resp.getOutputStream();
    try {
      servletOutputStream.write(bArray);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }
  @Override
  protected void doPost(HttpServletRequest httpServletRequest,
      HttpServletResponse httpServletResponse) throws ServletException, IOException {
    doGet(httpServletRequest, httpServletResponse);
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\com\dgs\cg\deployment\Const.java---
package com.dgs.cg.deployment;
import java.io.File;
import java.util.Arrays;
import java.util.List;
public class Const {
  public static final int MAX_FONT_SIZE = 20;
  public static final int MIN_FONT_SIZE = 10;
  public static final double MAX_FONT_COLOR_UNMATCH_PERCENTAGE = 0.02;
  public static final int MIN_FONT_COLOR_UNMATCH = 3;
  public static final int MIN_BACK_COLOR_UNMATCH = 2;
  public static final double MAX_BACKGROUND_COLOR_UNMATCH_PERCENTAGE = 0.01;
  public static final String CHECKBOX_FOR_CREATE_CONSTRUCTOR_WHEN_NEW_CLASS_RS_NAME = null;
  public static final String BTN_ADD_INTERFACE_WHEN_NEW_CLASS_RS_NAME = null;
  public static final String TEXT_FIELD_SUPER_CLASS_WHEN_NEW_CLASS_RS_NAME = null;
  public static final String CLASS_NAME_WHEN_NEW_CLASS_RS_NAME = null;
  public static final String PACKNAME_WHEN_NEW_CLASS_RS_NAME = null;
  public static final String NEW_CLASS_IN_POP_MENU_RS_NAME = null;
  public static final List<Class<?>> primitiveClz =
      Arrays.asList(new Class[] {java.lang.String.class, int.class, boolean.class, long.class,
          double.class, short.class, float.class, byte.class, char.class, Integer.class,
          Boolean.class, Long.class, Double.class, Short.class, Float.class, Byte.class,
          Character.class, java.sql.Date.class, java.util.Date.class, java.sql.Timestamp.class,
          java.math.BigInteger.class, java.math.BigDecimal.class,
          javax.xml.datatype.XMLGregorianCalendar.class, File.class, java.lang.Object.class});
  public static final List<Class<?>> returnTypePrimitiveClz = Arrays.asList(new Class[] {
      java.lang.String.class, int.class, boolean.class, long.class, double.class, short.class,
      float.class, byte.class, char.class, Integer.class, Boolean.class, Long.class, Double.class,
      Short.class, Float.class, Byte.class, Character.class, java.sql.Date.class,
      java.util.Date.class, java.sql.Timestamp.class, java.math.BigInteger.class,
      java.math.BigDecimal.class, javax.xml.datatype.XMLGregorianCalendar.class, File.class,
      java.lang.Object.class, void.class});
  public static enum WinOperationEnum {
    RESIZE("resize"), SWITCH_ECLIPSE("switchProcess");
    String value;
    private WinOperationEnum(String value) {
      this.value = value;
    }
    public void setValue(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\com\dgs\cg\deployment\NetServiceApi.java---
package com.dgs.cg.deployment;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import com.dgs.cg.deployment.Const.WinOperationEnum;
public class NetServiceApi {
  public NetServiceApi() {
  }
  public static String switchProcess(WinOperationEnum wo) {
    StringBuilder sb = new StringBuilder();
    Socket socket = null;
    try {
      Thread.sleep(3000L);
      socket = new Socket("localhost", 8999);
      socket.setSoTimeout(3000);
      OutputStream outputStream = socket.getOutputStream();
      if (WinOperationEnum.SWITCH_ECLIPSE.equals(wo)) {
        outputStream.write("switchProcess\r\n".getBytes());
      } else if (WinOperationEnum.RESIZE.equals(wo)) {
        outputStream.write("resize\r\n".getBytes());
      }
      outputStream.flush();
      InputStream inputStream = socket.getInputStream();
      InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
      BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
      String s = null;
      while ((s = bufferedReader.readLine()) != null) {
        sb.append(s);
      }
      outputStream.close();
      inputStream.close();
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      try {
        if (socket != null)
          socket.close();
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
    return sb.toString();
  }
  public static void main(String args[]) {
    Thread t = new Thread(new Runnable() {
      @Override
      public void run() {
        NetServiceApi tns = new NetServiceApi();
        String s = tns.switchProcess(WinOperationEnum.RESIZE);
        System.out.println(String.format("s=%s", s));
      }
    });
    t.start();
    return;
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\com\dgs\cg\deployment\RunParam.java---
package com.dgs.cg.deployment;
public class RunParam {
  String key;
  String path;
  String url;
  String clzName;
  String properties;
  String[] args;
  public RunParam(String key, String path, String url, String clzName, String properties,
      String[] args) {
    super();
    this.key = key;
    this.path = path;
    this.url = url;
    this.clzName = clzName;
    this.properties = properties;
    this.args = args;
  }
  public String getKey() {
    return key;
  }
  public String getPath() {
    return path;
  }
  public String getUrl() {
    return url;
  }
  public String getClzName() {
    return clzName;
  }
  public String getProperties() {
    return properties;
  }
  public String[] getArgs() {
    return args;
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\com\dgs\cg\deployment\SliderTest.java---
package com.dgs.cg.deployment;
import javax.swing.JSlider;
public class SliderTest {
  public SliderTest() {}
  public static void main(String[] args) {
    SliderTest sliderTest = new SliderTest();
    JSlider jSlider = new JSlider();
    int arg0 = 1;
    jSlider.setValue(arg0);
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\servlet\deployment\RunAppUtil.java---
package servlet.deployment;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import util.DeploymentUrlClzLoader;
public class RunAppUtil {
  private static final long serialVersionUID = 8351642016254691682L;
  public RunAppUtil(RunParam runParam) {
  }
  public void runapp(RunParam rp) throws IOException {
    String key = rp.getKey();
    String path = rp.getPath();
    String url = rp.getUrl();
    String clzName = rp.getClzName();
    String properties = rp.getProperties();
    try {
      util.DeploymentUrlClzLoader.trust(url);
    } catch (Exception e2) {
      e2.printStackTrace();
    }
    key = URLEncoder.encode(key, "UTF-8");
    path = URLEncoder.encode(path, "UTF-8");
    String prop[] = properties.split(" ");
    for (String p : prop) {
      String sArray[] = p.split("=");
      System.setProperty(sArray[0], sArray[1]);
    }
    URL urlForApp = new URL(String.format("%s?key=%s&path=%s", url, key, path));
    System.out.println(String.format("going to launch app %s", urlForApp));
    URL urls[] = new URL[] {urlForApp};
    try {
      DeploymentUrlClzLoader duc = new DeploymentUrlClzLoader();
      duc.init(urls);
      Class<?> clz = duc.loadClass(urls, clzName);
      Method methodArray[] = clz.getMethods();
      List<Method> list = Arrays.asList(methodArray);
      Method m1 = list.stream().filter(e -> {
        if (Modifier.isPublic(e.getModifiers()) && e.getName().equals("main")) {
          return true;
        }
        return false;
      }).collect(Collectors.toList()).get(0);
      String params[] = null;
      Object o = m1.invoke(null, (Object) params);
    } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e1) {
      e1.printStackTrace();
    } catch (ClassNotFoundException e1) {
      e1.printStackTrace();
    }
    return;
  }
  protected void doPost() throws Exception {
    String key = null;
    String path = null;
    String url = null;
    String clzName = null;
    String properties = null;
    RunParam runParam = new RunParam(key, path, url, clzName, properties);
    RunApp runApp = new RunApp(runParam);
    Thread thread = new Thread(runApp);
    thread.start();
  }
  public class RunParam {
    String key;
    String path;
    String url;
    String clzName;
    String properties;
    public RunParam(String key, String path, String url, String clzName, String properties) {
      super();
      this.key = key;
      this.path = path;
      this.url = url;
      this.clzName = clzName;
      this.properties = properties;
    }
    public String getKey() {
      return key;
    }
    public String getPath() {
      return path;
    }
    public String getUrl() {
      return url;
    }
    public String getClzName() {
      return clzName;
    }
    public String getProperties() {
      return properties;
    }
  }
  public class RunApp implements Runnable {
    RunParam rp;
    public RunApp(RunParam rp) {
      super();
      this.rp = rp;
    }
    @Override
    public void run() {
      try {
        runapp(rp);
      } catch (IOException e) {
        e.printStackTrace();
      }
    }
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\servlet\deployment\RunParam.java---
package servlet.deployment;
public class RunParam {
  String key;
  String path;
  String url;
  String clzName;
  String properties;
  public RunParam(String key, String path, String url, String clzName, String properties) {}
  public String getKey() {
    return key;
  }
  public String getPath() {
    return path;
  }
  public String getUrl() {
    return url;
  }
  public String getClzName() {
    return clzName;
  }
  public String getProperties() {
    return properties;
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\ui\FileChoosePane.java---
package ui;
import java.awt.FlowLayout;
import java.io.File;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
public class FileChoosePane extends ParameterPane {
  private JTextField textField;
  private JButton jButton = new JButton("browse");
  private JButton addFile = new JButton("add ...");
  boolean chooseDirOnly = false;
  public FileChoosePane() {
    init(-1, false);
  }
  public FileChoosePane(int fieldSize) {
    init(fieldSize, false);
  }
  public FileChoosePane(int fieldSize, boolean chooseDirOnly) {
    init(fieldSize, chooseDirOnly);
  }
  public void init(int fieldSize, boolean chooseDirOnly) {
    if (fieldSize == -1) {
      textField = new JTextField();
    } else {
      textField = new JTextField(fieldSize);
    }
    this.chooseDirOnly = chooseDirOnly;
    FlowLayout fl = new FlowLayout(FlowLayout.LEFT);
    this.setLayout(fl);
    this.add(paramLabel);
    this.add(tipLabel);
    this.add(textField);
    this.jButton.addActionListener(l -> {
      JFileChooser jFileChooser = new JFileChooser("./");
      if (chooseDirOnly) {
        jFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      }
      this.add(jFileChooser);
      int val = jFileChooser.showOpenDialog(jFileChooser);
      if (val == JFileChooser.APPROVE_OPTION) {
        File file = jFileChooser.getSelectedFile();
        String s = file.getAbsolutePath();
        textField.setText(s);
      }
      if (val == JFileChooser.CANCEL_OPTION) {
      }
    });
    this.add(jButton);
  }
  public JComponent getInputComponent() {
    return this.textField;
  }
  public JTextField getTextField() {
    return textField;
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\ui\LinePane.java---
package ui;
import java.awt.FlowLayout;
import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.border.Border;
public class LinePane extends JPanel {
	public LinePane() {
		init();
	}
	public void init() {
		FlowLayout flowLayout = new FlowLayout(FlowLayout.LEFT);
		this.setLayout(flowLayout);
		Border border = BorderFactory.createEmptyBorder(1, 1, 1, 1);
		this.setBorder(border);
		return;
	}
	public void addComponent(JComponent component) {
		this.add(component);
		return;
	}
}
----strat of file D:\projects\cg\runappinswing\src\main\java\ui\MainFrame.java---
package ui;
import java.awt.BorderLayout;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.WindowConstants;
import com.dgs.cg.deployment.Const.WinOperationEnum;
import com.dgs.cg.deployment.NetServiceApi;
import com.dgs.cg.deployment.RunParam;
import util.DeploymentUrlClzLoader;
public class MainFrame extends JFrame {
  JPasswordField key;
  JLabel tipJLabel = new JLabel("");
  FileChoosePane filePane;
  JTextField jarUrl;
  JTextField mainClz;
  JTextField propties;
  JTextField args;
  JButton btn;
  public MainFrame() {
    init();
  }
  public void init() {
    key = new JPasswordField(50);
    filePane = new FileChoosePane(50, false);
    jarUrl = new JTextField(50);
    mainClz = new JTextField(50);
    propties = new JTextField(50);
    args = new JTextField(50);
    btn = new JButton("ok");
    MultipleLinePane mlp = new MultipleLinePane();
    mlp.addComponentInNewLine(new JLabel("jar url         "), jarUrl);
    filePane.getParamLabel().setText("file path ");
    mlp.addComponentInNewLine(filePane);
    mlp.addComponentInNewLine(new JLabel("key             "), key);
    mlp.addComponentInNewLine(new JLabel("main clz    "), mainClz);
    mlp.addComponentInNewLine(new JLabel("properties"), propties);
    mlp.addComponentInNewLine(new JLabel("args          "), args);
    mlp.addComponentInNewLine(btn);
    mlp.addComponentInNewLine(tipJLabel);
    this.getContentPane().setLayout(new BorderLayout());
    this.getContentPane().add(mlp, BorderLayout.CENTER);
    addEnterKeyListener(jarUrl);
    addEnterKeyListener(mainClz);
    addEnterKeyListener(propties);
    addEnterKeyListener(key);
    int arg0 = 300;
    int arg1 = 100;
    this.setLocation(arg0, arg1);
    this.setSize(1000, 1000);
    btn.addActionListener(l -> {
      runApp();
    });
    btn.addKeyListener(new KeyAdapter() {
      public void keyReleased(KeyEvent e) {
        if (e.getKeyChar() == KeyEvent.VK_ENTER) {
          runApp();
        }
      }
    });
    return;
  }
  public void addEnterKeyListener(JComponent jc) {
    jc.addKeyListener(new KeyAdapter() {
      public void keyReleased(KeyEvent e) {
        if (e.getKeyCode() == 9 || e.getKeyCode() == 18) {
          return;
        }
        if (e.getKeyChar() == KeyEvent.VK_ENTER) {
          runApp();
          return;
        }
      }
    });
  }
  public void start() {
    this.pack();
    this.setVisible(true);
    this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
  }
  public void runApp() {
    String argText = args.getText();
    String[] arg = argText.split(" ");
    RunParam runParam =
        new RunParam(new String(key.getPassword()), filePane.getTextField().getText(),
            jarUrl.getText(), mainClz.getText(), propties.getText(), arg
        );
    try {
      Thread.sleep(3000L);
      this.runapp(runParam);
    } catch (Exception e) {
      e.printStackTrace();
    }
    Thread t = new Thread(new Runnable() {
      @Override
      public void run() {
        NetServiceApi tns = new NetServiceApi();
        String s = tns.switchProcess(WinOperationEnum.SWITCH_ECLIPSE);
      }
    });
    t.start();
  }
  public void hideTitleBar() {
    int arg0 = 1;
    this.setDefaultCloseOperation(EXIT_ON_CLOSE);
    this.setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    return;
  }
  public void runapp(RunParam rp) throws UnsupportedEncodingException {
    String key = rp.getKey();
    String path = rp.getPath();
    String url = rp.getUrl();
    String properties = rp.getProperties();
    String[] args = rp.getArgs();
    key = URLEncoder.encode(key, "UTF-8");
    path = URLEncoder.encode(path, "UTF-8");
    String prop[] = properties.split(" ");
    for (String p : prop) {
      String sArray[] = p.split("=");
      if (sArray.length > 1)
        System.setProperty(sArray[0], sArray[1]);
    }
    try {
      String urlStr = String.format("%s?key=%s&path=%s", url, key, path);
      URL urlForApp = new URL(urlStr);
      try {
        util.DeploymentUrlClzLoader.trust(urlStr);
      } catch (Exception e2) {
        e2.printStackTrace();
      }
      URL urls[] = new URL[] {urlForApp};
      DeploymentUrlClzLoader duc = new DeploymentUrlClzLoader();
      duc.init(urls);
      Class<?> clz = duc.loadClass(urls, rp.getClzName());
      Method methodArray[] = clz.getMethods();
      List<Method> list = Arrays.asList(methodArray);
      Method m1 = list.stream().filter(e -> {
        if (Modifier.isPublic(e.getModifiers()) && e.getName().equals("main")) {
          return true;
        }
        return false;
      }).collect(Collectors.toList()).get(0);
      String params[] = args;
      Object o = m1.invoke(null, (Object) params);
      this.setVisible(false);
      this.dispose();
    } catch (Exception e1) {
      tipJLabel.setText("failed start app");
      e1.printStackTrace();
    }
    return;
  }
  public JPasswordField getKey() {
    return key;
  }
  public FileChoosePane getFilePane() {
    return filePane;
  }
  public JTextField getJarUrl() {
    return jarUrl;
  }
  public JTextField getMainClz() {
    return mainClz;
  }
  public JTextField getPropties() {
    return propties;
  }
  public JTextField getArgs() {
    return args;
  }
  public static void main(String[] args) {
    MainFrame mainFrame = new MainFrame();
    if (args.length > 0) {
      mainFrame.getJarUrl().setText(args[0]);
      mainFrame.getKey().setText(args[1]);
      mainFrame.getMainClz().setText(args[2]);
      mainFrame.getFilePane().getTextField().setText(args[3]);
      StringBuilder sb = new StringBuilder();
      for (int i = 4; i < args.length; i++) {
        sb.append(args[i]).append(" ");
      }
      mainFrame.getArgs().setText(sb.toString());
    }
    mainFrame.start();
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\ui\MultipleFileChoosePane.java---
package ui;
import java.awt.Button;
import java.util.List;
public class MultipleFileChoosePane extends FileChoosePane {
  private List<FileChoosePane> FileChooseList;
  int defaultFiles = 1;
  public MultipleFileChoosePane(int defaultFiles, int fieldSize, boolean chooseDirOnly) {
    super();
    this.defaultFiles = defaultFiles;
    for (int i = 0; i < defaultFiles; i++) {
      FileChoosePane fileChoosePane = new FileChoosePane();
      fileChoosePane.add(new Button());
      Button btn = new Button("add ...");
      btn.addActionListener(l -> {
      });
    }
  }
}
----strat of file D:\projects\cg\runappinswing\src\main\java\ui\MultipleLinePane.java---
package ui;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.border.Border;
public class MultipleLinePane extends JPanel {
	List<LinePane> list = new ArrayList<>();
	private LinePane currentLinePane;
	public MultipleLinePane() {
		super();
		BoxLayout boxLayout = new BoxLayout(this, javax.swing.BoxLayout.Y_AXIS);
		this.setLayout(boxLayout);
		int arg0 = 1;
		int arg1 = 1;
		int arg2 = 1;
		int arg3 = 1;
		Border border = BorderFactory.createEmptyBorder(arg0, arg1, arg2, arg3);
		this.setBorder(border);
	}
	public void init() {
		return;
	}
	public MultipleLinePane addComponentInNewLine(JComponent... components) {
		LinePane lp = new LinePane();
		list.add(lp);
		currentLinePane = lp;
		this.add(currentLinePane);
		for (JComponent jComponent : components) {
			lp.addComponent(jComponent);
		}
		return this;
	}
	public MultipleLinePane addComponent(JComponent component) {
		if (currentLinePane == null) {
			LinePane lp = new LinePane();
			list.add(lp);
			currentLinePane = lp;
			this.add(currentLinePane);
		}
		currentLinePane.addComponent(component);
		return this;
	}
}
----strat of file D:\projects\cg\runappinswing\src\main\java\ui\ParameterPane.java---
package ui;
import javax.swing.JLabel;
import javax.swing.JPanel;
public abstract class ParameterPane extends JPanel {
  public JLabel paramLabel;
  public JLabel tipLabel;
  public ParameterPane() {
    init();
  }
  public void init() {
    paramLabel = new JLabel();
    tipLabel = new JLabel();
  }
  public JLabel getParamLabel() {
    return paramLabel;
  }
  public void setParamLabel(JLabel paramLabel) {
    this.paramLabel = paramLabel;
  }
  public JLabel getTipLabel() {
    return tipLabel;
  }
  public void setTipLabel(JLabel tipLabel) {
    this.tipLabel = tipLabel;
  }
}
----strat of file D:\projects\cg\runappinswing\src\pom.xml---
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.dgs.cg</groupId>
	<artifactId>runappinswing</artifactId>
	<version>1.0</version>
	<packaging>jar</packaging>
	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<org.apache.maven.plugins.maven-assembly-plugin.version>2.6</org.apache.maven.plugins.maven-assembly-plugin.version>
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
	</properties>
	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>deployment</groupId>
			<artifactId>common</artifactId>
			<version>1.0</version>
		</dependency>
	</dependencies>
	<build>
		<resources>
			<resource>
				<directory>${project.basedir}</directory>
				<targetPath>${project.basedir}/target</targetPath>
				<includes>
					<include>*.bat</include>
				</includes>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>${org.apache.maven.plugins.maven-assembly-plugin.version}</version>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifest>
							<mainClass>ui.MainFrame</mainClass>
						</manifest>
					</archive>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.0.2</version>
				<executions>
					<execution>
						<id>copy-source</id>
						<phase>install</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target</outputDirectory>
							<resources>
								<resource>
									<directory>D:\project\codegen\production\netproj\WpfApp1\WpfApp1\bin</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>com.akathist.maven.plugins.launch4j</groupId>
				<artifactId>launch4j-maven-plugin</artifactId>
				<executions>
					<execution>
						<id>l4j-clui</id>
						<phase>package</phase>
						<goals>
							<goal>launch4j</goal>
						</goals>
						<configuration>
							<headerType>console</headerType>
							<outfile>target/test.exe</outfile>
							<jar>target/runappinswing-1.0-jar-with-dependencies.jar</jar>
							<errTitle>encc</errTitle>
							<classPath>
								<mainClass>ui.MainFrame</mainClass>
								<addDependencies>true</addDependencies>
								<preCp>anything</preCp>
							</classPath>
							<jre>
								<minVersion>1.8.0</minVersion>
								<path>../../../jre</path>
							</jre>
							<versionInfo>
								<fileVersion>1.2.3.4</fileVersion>
								<txtFileVersion>txt file version?</txtFileVersion>
								<fileDescription>a description</fileDescription>
								<copyright>my copyright</copyright>
								<productVersion>4.3.2.1</productVersion>
								<txtProductVersion>txt product version</txtProductVersion>
								<productName>E-N-C-C</productName>
								<internalName>test</internalName>
								<originalFilename>test.exe</originalFilename>
							</versionInfo>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
----strat of file D:\projects\cg\runappinswing\src\run.bat---
 start javaw -jar ./runappinswing-1.0-jar-with-dependencies.jar
 rem java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -jar  ./runappinswing-1.0-jar-with-dependencies.jar 
rem pause
----strat of file D:\projects\cg\runappinswing\src\run2.bat---
 start javaw -jar ./runappinswing-1.0-jar-with-dependencies.jar https://localhost/runapp/jar/1 Server app.Main D:\apache-tomcat-8.0.52-windows-x64\apache-tomcat-8.0.52\webapps\enc_lib\eeeeeessssss -Djava.awt.headless=false -Doutput=D:\project\codegen\production\winSTSRobot\output.log -Dbotbrain=D:\project\codegen\production\botbrain "-Dclipboard app path=D:\project\codegen\production\netproj\WpfApp1\WpfApp1\bin\Debug\WpfApp1.exe"
 rem java -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -jar  ./runappinswing-1.0-jar-with-dependencies.jar  https://localhost/runapp/jar/1 Server&client111 app.Main D:\apache-tomcat-8.0.52-windows-x64\apache-tomcat-8.0.52\webapps\enc_lib\eeeeeessssss java.awt.headless=false output=D:\project\codegen\production\winSTSRobot\output.log botbrain=D:\project\codegen\production\botbrain
rem pause
